{"version":3,"file":"component---src-pages-enquiry-js-9e534863426911b56f17.js","mappings":"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","sources":["webpack://dhanesh-and-company/./node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","webpack://dhanesh-and-company/./node_modules/@emailjs/browser/es/utils/createWebStorage/createWebStorage.js","webpack://dhanesh-and-company/./node_modules/@emailjs/browser/es/store/store.js","webpack://dhanesh-and-company/./node_modules/@emailjs/browser/es/utils/buildOptions/buildOptions.js","webpack://dhanesh-and-company/./node_modules/@emailjs/browser/es/api/sendPost.js","webpack://dhanesh-and-company/./node_modules/@emailjs/browser/es/utils/validateParams/validateParams.js","webpack://dhanesh-and-company/./node_modules/@emailjs/browser/es/utils/isHeadless/isHeadless.js","webpack://dhanesh-and-company/./node_modules/@emailjs/browser/es/errors/headlessError/headlessError.js","webpack://dhanesh-and-company/./node_modules/@emailjs/browser/es/utils/isBlockedValueInParams/isBlockedValueInParams.js","webpack://dhanesh-and-company/./node_modules/@emailjs/browser/es/utils/validateBlockListParams/validateBlockListParams.js","webpack://dhanesh-and-company/./node_modules/@emailjs/browser/es/errors/blockedEmailError/blockedEmailError.js","webpack://dhanesh-and-company/./node_modules/@emailjs/browser/es/utils/isLimitRateHit/isLimitRateHit.js","webpack://dhanesh-and-company/./node_modules/@emailjs/browser/es/utils/validateLimitRateParams/validateLimitRateParams.js","webpack://dhanesh-and-company/./node_modules/@emailjs/browser/es/errors/limitRateError/limitRateError.js","webpack://dhanesh-and-company/./node_modules/@emailjs/browser/es/index.js","webpack://dhanesh-and-company/./node_modules/@emailjs/browser/es/methods/init/init.js","webpack://dhanesh-and-company/./node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js","webpack://dhanesh-and-company/./node_modules/@emailjs/browser/es/utils/validateForm/validateForm.js","webpack://dhanesh-and-company/./src/pages/enquiry.js"],"sourcesContent":["export class EmailJSResponseStatus {\n    constructor(_status = 0, _text = 'Network Error') {\n        this.status = _status;\n        this.text = _text;\n    }\n}\n","export const createWebStorage = () => {\n    if (typeof localStorage === 'undefined')\n        return;\n    return {\n        get: (key) => Promise.resolve(localStorage.getItem(key)),\n        set: (key, value) => Promise.resolve(localStorage.setItem(key, value)),\n        remove: (key) => Promise.resolve(localStorage.removeItem(key)),\n    };\n};\n","import { createWebStorage } from '../utils/createWebStorage/createWebStorage';\nexport const store = {\n    origin: 'https://api.emailjs.com',\n    blockHeadless: false,\n    storageProvider: createWebStorage(),\n};\n","export const buildOptions = (options) => {\n    if (!options)\n        return {};\n    // support compatibility with SDK v3\n    if (typeof options === 'string') {\n        return {\n            publicKey: options,\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (options.toString() === '[object Object]') {\n        return options;\n    }\n    return {};\n};\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = async (url, data, headers = {}) => {\n    const response = await fetch(store.origin + url, {\n        method: 'POST',\n        headers,\n        body: data,\n    });\n    const message = await response.text();\n    const responseStatus = new EmailJSResponseStatus(response.status, message);\n    if (response.ok) {\n        return responseStatus;\n    }\n    throw responseStatus;\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey || typeof publicKey !== 'string') {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID || typeof serviceID !== 'string') {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID || typeof templateID !== 'string') {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n};\n","export const isHeadless = (navigator) => {\n    return navigator.webdriver || !navigator.languages || navigator.languages.length === 0;\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const headlessError = () => {\n    return new EmailJSResponseStatus(451, 'Unavailable For Headless Browser');\n};\n","import { validateBlockListParams } from '../validateBlockListParams/validateBlockListParams';\nconst isBlockListDisabled = (options) => {\n    return !options.list?.length || !options.watchVariable;\n};\nconst getValue = (data, name) => {\n    return data instanceof FormData ? data.get(name) : data[name];\n};\nexport const isBlockedValueInParams = (options, params) => {\n    if (isBlockListDisabled(options))\n        return false;\n    validateBlockListParams(options.list, options.watchVariable);\n    const value = getValue(params, options.watchVariable);\n    if (typeof value !== 'string')\n        return false;\n    return options.list.includes(value);\n};\n","export const validateBlockListParams = (list, watchVariable) => {\n    if (!Array.isArray(list)) {\n        throw 'The BlockList list has to be an array';\n    }\n    if (typeof watchVariable !== 'string') {\n        throw 'The BlockList watchVariable has to be a string';\n    }\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const blockedEmailError = () => {\n    return new EmailJSResponseStatus(403, 'Forbidden');\n};\n","import { validateLimitRateParams } from '../validateLimitRateParams/validateLimitRateParams';\nconst getLeftTime = async (id, throttle, storage) => {\n    const lastTime = Number((await storage.get(id)) || 0);\n    return throttle - Date.now() + lastTime;\n};\nexport const isLimitRateHit = async (defaultID, options, storage) => {\n    if (!options.throttle || !storage) {\n        return false;\n    }\n    validateLimitRateParams(options.throttle, options.id);\n    const id = options.id || defaultID;\n    const leftTime = await getLeftTime(id, options.throttle, storage);\n    if (leftTime > 0) {\n        return true;\n    }\n    await storage.set(id, Date.now().toString());\n    return false;\n};\n","export const validateLimitRateParams = (throttle, id) => {\n    if (typeof throttle !== 'number' || throttle < 0) {\n        throw 'The LimitRate throttle has to be a positive number';\n    }\n    if (id && typeof id !== 'string') {\n        throw 'The LimitRate ID has to be a non-empty string';\n    }\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const limitRateError = () => {\n    return new EmailJSResponseStatus(429, 'Too Many Requests');\n};\n","import { EmailJSResponseStatus } from './models/EmailJSResponseStatus';\nimport { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm, EmailJSResponseStatus };\nexport default {\n    init,\n    send,\n    sendForm,\n    EmailJSResponseStatus,\n};\n","import { store } from '../../store/store';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\n/**\n * EmailJS global SDK config\n * @param {object} options - the EmailJS global SDK config options\n * @param {string} origin - the non-default EmailJS origin\n */\nexport const init = (options, origin = 'https://api.emailjs.com') => {\n    if (!options)\n        return;\n    const opts = buildOptions(options);\n    store.publicKey = opts.publicKey;\n    store.blockHeadless = opts.blockHeadless;\n    store.storageProvider = opts.storageProvider;\n    store.blockList = opts.blockList;\n    store.limitRate = opts.limitRate;\n    store.origin = opts.origin || origin;\n};\n","import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateForm } from '../../utils/validateForm/validateForm';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\nconst findHTMLForm = (form) => {\n    return typeof form === 'string' ? document.querySelector(form) : form;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = async (serviceID, templateID, form, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const storageProvider = store.storageProvider || opts.storageProvider;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    const currentForm = findHTMLForm(form);\n    validateParams(publicKey, serviceID, templateID);\n    validateForm(currentForm);\n    const formData = new FormData(currentForm);\n    if (isBlockedValueInParams(blockList, formData)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\n        return Promise.reject(limitRateError());\n    }\n    formData.append('lib_version', '4.4.1');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', publicKey);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","export const validateForm = (form) => {\n    if (!form || form.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of the form';\n    }\n};\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from '@emotion/styled';\r\nimport Layout from '../components/layout';\r\nimport TextHeader from '../components/TextHeader';\r\nimport SEO from '../components/seo';\r\nimport emailjs from '@emailjs/browser';\r\nimport Button from '../components/Button/Button';\r\n\r\nconst ContactPage = ({ className }) => {\r\n  const form = useRef();\r\n  const [successMessage, setSuccessMessage] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    emailjs.init('ZZ6ICXjrCVsBkL7FE');\r\n  }, []);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    emailjs.sendForm('service_6kyxjo4', 'template_sbso5nh', form.current, 'ZZ6ICXjrCVsBkL7FE')\r\n      .then((response) => {\r\n        setSuccessMessage('Your enquiry has been sent successfully!');\r\n        setErrorMessage('');\r\n        e.target.reset();\r\n      })\r\n      .catch((err) => {\r\n        setErrorMessage('Failed to send your enquiry. Please try again later.');\r\n        setSuccessMessage('');\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Layout className={className}>\r\n      <SEO title=\"Enquiry\" description=\"Submit your enquiry for electrical goods at Dhanesh & Co.\" />\r\n      <FormWrapper>\r\n        <TextHeader mainHeader=\"Submit Your Enquiry\" />\r\n        {successMessage && <Message success>{successMessage}</Message>}\r\n        {errorMessage && <Message error>{errorMessage}</Message>}\r\n        \r\n        <form ref={form} onSubmit={handleSubmit}>\r\n          <ColumnsWrapper>\r\n            <Column>\r\n              <FormField>\r\n                <label htmlFor=\"companyName\">Company Name</label>\r\n                <Input type=\"text\" id=\"companyName\" name=\"company_name\" required />\r\n              </FormField>\r\n              \r\n              <FormField>\r\n                <label htmlFor=\"email\">Email</label>\r\n                <Input type=\"email\" id=\"email\" name=\"user_email\" required />\r\n              </FormField>\r\n              \r\n              <FormField>\r\n                <label htmlFor=\"address\">Address</label>\r\n                <Textarea id=\"address\" name=\"address\" rows=\"2\" required />\r\n              </FormField>\r\n            </Column>\r\n            \r\n            <Column>\r\n              <FormField>\r\n                <label htmlFor=\"name\">Your Name</label>\r\n                <Input type=\"text\" id=\"name\" name=\"user_name\" required />\r\n              </FormField>\r\n\r\n              <FormField>\r\n                <label htmlFor=\"phoneNumber\">Phone Number</label>\r\n                <Input type=\"number\" id=\"phoneNumber\" name=\"phone_number\" required />\r\n              </FormField>\r\n              \r\n              <FormField>\r\n                <label htmlFor=\"enquiry\">Enquiry</label>\r\n                <Textarea id=\"enquiry\" name=\"message\" rows=\"2\" required />\r\n              </FormField>\r\n            </Column>\r\n          </ColumnsWrapper>\r\n\r\n          {/* Use the Button component here */}\r\n          <Button type=\"submit\">Submit</Button>\r\n        </form>\r\n      </FormWrapper>\r\n    </Layout>\r\n  );\r\n};\r\n\r\n// Styled Components\r\nconst FormWrapper = styled.div`\r\n  max-width: 900px;\r\n  margin: 0 auto;\r\n  padding: 2rem;\r\n`;\r\n\r\nconst ColumnsWrapper = styled.div`\r\n  display: flex;\r\n  gap: 4rem;\r\n  margin-bottom: 2rem;\r\n\r\n  @media (max-width: 768px) {\r\n    flex-direction: column;\r\n    gap: 1rem;\r\n  }\r\n`;\r\n\r\nconst Column = styled.div`\r\n  flex: 1;\r\n`;\r\n\r\nconst FormField = styled.div`\r\n  margin-bottom: 1.5rem;\r\n  \r\n  label {\r\n    display: block;\r\n    font-size: 1rem;\r\n    font-weight: 600;\r\n    color: #333;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  width: 100%;\r\n  padding: 0.75rem 0;\r\n  font-size: 1rem;\r\n  background: none;\r\n  border: none;\r\n  border-bottom: 1px solid #ccc;\r\n  outline: none;\r\n  transition: border-color 0.2s ease;\r\n\r\n  &:focus {\r\n    border-bottom-color: #007bff;\r\n  }\r\n`;\r\n\r\nconst Textarea = styled.textarea`\r\n  width: 100%;\r\n  padding: 0.75rem 0;\r\n  font-size: 1rem;\r\n  background: none;\r\n  border: none;\r\n  border-bottom: 1px solid #ccc;\r\n  outline: none;\r\n  transition: border-color 0.2s ease;\r\n\r\n  &:focus {\r\n    border-bottom-color: #007bff;\r\n  }\r\n\r\n  resize: vertical;\r\n`;\r\n\r\nconst Message = styled.div`\r\n  text-align: center;\r\n  color: ${(props) => (props.success ? 'green' : 'red')};\r\n  font-weight: bold;\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nexport default ContactPage;\r\n\r\nContactPage.propTypes = {\r\n  className: PropTypes.string,\r\n};\r\n"],"names":["EmailJSResponseStatus","constructor","_status","_text","this","status","text","store","origin","blockHeadless","storageProvider","localStorage","get","key","Promise","resolve","getItem","set","value","setItem","remove","removeItem","createWebStorage","buildOptions","options","publicKey","toString","sendPost","async","url","data","headers","response","fetch","method","body","message","responseStatus","ok","validateParams","serviceID","templateID","isHeadless","navigator","webdriver","languages","length","headlessError","isBlockedValueInParams","params","list","watchVariable","isBlockListDisabled","Array","isArray","validateBlockListParams","name","FormData","includes","blockedEmailError","isLimitRateHit","defaultID","storage","throttle","id","validateLimitRateParams","leftTime","lastTime","Number","Date","now","getLeftTime","limitRateError","opts","blockList","limitRate","form","reject","currentForm","document","querySelector","findHTMLForm","nodeName","validateForm","formData","location","pathname","append","FormWrapper","_styled","target","styles","ColumnsWrapper","Column","FormField","Input","Textarea","Message","props","success","_ref","className","useRef","successMessage","setSuccessMessage","useState","errorMessage","setErrorMessage","useEffect","emailjs","___EmotionJSX","Layout","SEO","title","description","TextHeader","mainHeader","error","ref","onSubmit","e","preventDefault","current","then","reset","catch","err","htmlFor","type","required","rows","Button"],"sourceRoot":""}